import { type SetupContext, type Ref } from "vue";
import type { IIDProps } from "../attributes/useID";
import { type ConfigurableDocument } from "@vueuse/core";
export declare const ModalProps: {
    fade: {
        type: BooleanConstructor;
        default: boolean;
    };
    backdrop: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    keyboard: {
        type: BooleanConstructor;
        default: boolean;
    };
    focus: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export interface IModalProps {
    fade?: boolean;
    backdrop?: boolean | string;
    keyboard?: boolean;
    focus?: boolean;
}
export interface IModalMethods {
    show: () => Promise<void>;
    hide: () => Promise<void>;
    toggle: () => Promise<void>;
    dismiss: () => Promise<void>;
}
export interface IModalState {
    isShown: Ref<boolean>;
}
interface IProps extends IModalProps, IIDProps {
}
export declare function useModal<P extends IProps>(props: P, context: SetupContext<Record<string, any>>, elementRef: Ref<HTMLElement | undefined>, options?: ConfigurableDocument): {
    class: import("vue").ComputedRef<{
        modal: boolean;
        show: boolean;
        fade: boolean | undefined;
        "pe-none": boolean;
        "modal-static": boolean;
    }>;
    style: import("vue").ComputedRef<{
        display: string;
    }>;
    attr: import("vue").ComputedRef<{
        tabindex: number;
    }>;
    render: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | undefined;
    method: Record<string, (...args: any[]) => any> & IModalMethods;
};
export {};
