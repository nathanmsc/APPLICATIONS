import { type Ref } from "vue";
import { type IIDProps } from "../attributes/useID";
export declare const CarouselActiveProps: {
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    interval: {
        type: (StringConstructor | NumberConstructor)[];
    };
};
export interface ICarouselActiveProps {
    active?: boolean;
    disabled?: boolean;
    interval?: string | number;
}
export interface IActiveState {
    active: Ref<boolean>;
}
export interface IActiveMethods {
    show: () => void;
    hide: () => void;
    toggle: () => void;
    dismiss: () => void;
}
interface IProps extends ICarouselActiveProps, IIDProps {
}
export declare function useCarouselActive<P extends IProps>(props: P, elementRef: Ref<HTMLElement | undefined>, eventSuffix: string): {
    class: import("vue").ComputedRef<{
        active: boolean;
        disabled: boolean | undefined;
    }>;
    attr: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    method: Record<string, (...args: any[]) => any> & IActiveMethods;
};
export {};
