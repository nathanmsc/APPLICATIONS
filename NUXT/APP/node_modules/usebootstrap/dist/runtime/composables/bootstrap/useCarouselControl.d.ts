import { type Ref } from "vue";
import { type IEventEmitProps } from "../../utils/useEventEmitter";
import type { IIDProps } from "../attributes/useID";
export declare const CarouselControlProps: {
    target: {
        type: StringConstructor;
    };
    href: {
        type: StringConstructor;
    };
    slide: {
        type: StringConstructor;
    };
    slideTo: {
        type: (StringConstructor | NumberConstructor)[];
    };
    control: {
        type: BooleanConstructor;
    };
};
export interface ICarouselControlProps extends IEventEmitProps {
    slide?: string;
    slideTo?: string | number;
    control: boolean;
}
interface IProps extends ICarouselControlProps, IIDProps {
}
export declare function useCarouselControl<P extends IProps>(props: P, elementRef: Ref<HTMLElement | undefined>): {
    class?: undefined;
    attr?: undefined;
    method?: undefined;
    event?: undefined;
    renderControl?: undefined;
} | {
    class: import("vue").ComputedRef<{
        [x: string]: boolean;
        active: boolean;
    }>;
    attr: import("vue").ComputedRef<{
        "data-bs-target": boolean;
        type: string;
    }>;
    method: {
        slide: () => Promise<void>;
    };
    event: {
        onClick: () => Promise<void>;
    };
    renderControl: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[];
};
export {};
