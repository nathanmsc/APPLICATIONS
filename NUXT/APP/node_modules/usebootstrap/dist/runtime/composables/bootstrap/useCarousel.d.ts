import { type Ref } from "vue";
import type { IIDProps } from "../attributes/useID";
export declare const CarouselProps: {
    current: {
        type: StringConstructor;
    };
    slide: {
        type: BooleanConstructor;
        default: boolean;
    };
    interval: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: number;
    };
    fade: {
        type: BooleanConstructor;
    };
    dark: {
        type: BooleanConstructor;
    };
    touch: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    control: {
        type: BooleanConstructor;
    };
    indicators: {
        type: BooleanConstructor;
    };
};
export interface ICarouselProps {
    current?: string;
    slide?: boolean;
    interval?: string | number | boolean;
    fade?: boolean;
    dark?: boolean;
    touch?: boolean | string;
    control?: boolean;
    indicators?: boolean;
}
export interface ICarouselState {
    current: Ref<string>;
}
interface IProps extends ICarouselProps, IIDProps {
}
export declare function useCarousel<P extends IProps>(props: P, elementRef: Ref<HTMLElement | undefined>, eventSuffix: string): {
    class: import("vue").ComputedRef<{
        slide: boolean | undefined;
        "carousel-fade": boolean | undefined;
        "carousel-dark": boolean | undefined;
    }>;
    attr: import("vue").ComputedRef<{
        "data-bv-current": string;
    }>;
    method: Record<string, (...args: any[]) => any> & {
        next: () => Promise<void>;
        prev: () => Promise<void>;
        pause: import("@vueuse/shared").Fn;
        cycle: import("@vueuse/shared").Fn;
        to: (target: number | string) => Promise<void>;
    };
    renderIndicators: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | undefined;
    renderControl: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | undefined;
};
export {};
