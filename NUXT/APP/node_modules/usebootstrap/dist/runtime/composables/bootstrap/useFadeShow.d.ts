import { type SetupContext, type Ref } from "vue";
import type { IIDProps } from "../attributes/useID";
export declare const FadeShowProps: {
    fade: {
        type: BooleanConstructor;
        default: boolean;
    };
    show: {
        type: BooleanConstructor;
    };
    dismissible: {
        type: BooleanConstructor;
    };
};
export interface IFadeShowProps {
    fade?: boolean;
    show: boolean;
    dismissible: boolean;
}
export interface IFadeShowMethods {
    show: () => Promise<void>;
    hide: () => Promise<void>;
    toggle: () => Promise<void>;
    dismiss: () => Promise<void>;
}
export interface IFadeShowState {
    isShown: Ref<boolean>;
}
interface IFadeShowOptions {
    enabled?: boolean;
}
interface IProps extends IFadeShowProps, IIDProps {
}
export declare function useFadeShow<P extends IProps>(props: P, context: SetupContext<Record<string, any>>, elementRef: Ref<HTMLElement | undefined>, eventSuffix: string, options?: IFadeShowOptions): {
    class?: undefined;
    style?: undefined;
    attr?: undefined;
    method?: undefined;
} | {
    class: import("vue").ComputedRef<{
        show: boolean;
        fade: boolean | undefined;
    }>;
    style: import("vue").ComputedRef<{
        display: string;
    }>;
    attr: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    method: Record<string, (...args: any[]) => any> & IFadeShowMethods;
};
export {};
