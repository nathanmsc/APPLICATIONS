import { type IInlineProps } from "./useInline";
export declare const BlockProps: {
    overlay: {
        type: BooleanConstructor;
    };
    shadow: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    textAlignment: {
        type: StringConstructor;
    };
    textWrap: {
        type: StringConstructor;
    };
    textBreak: {
        type: BooleanConstructor;
    };
    alignSelf: {
        type: StringConstructor;
    };
    alignItems: {
        type: StringConstructor;
    };
    alignContent: {
        type: StringConstructor;
    };
    flex: {
        type: (StringConstructor | BooleanConstructor | ArrayConstructor)[];
    };
    flexDirection: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    flexFill: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    flexGrow: {
        type: StringConstructor;
    };
    flexHorizontal: {
        type: StringConstructor;
    };
    flexVirtical: {
        type: StringConstructor;
    };
    flexOrder: {
        type: (StringConstructor | NumberConstructor)[];
    };
    flexWrap: {
        type: StringConstructor;
    };
    float: {
        type: StringConstructor;
    };
    ratio: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
    };
    fixed: {
        type: StringConstructor;
    };
    sticky: {
        type: StringConstructor;
    };
    clearfix: {
        type: BooleanConstructor;
    };
    overflow: {
        type: StringConstructor;
    };
    tableResponsive: {
        type: StringConstructor;
    };
    justifyContent: {
        type: StringConstructor;
    };
    vstack: {
        type: BooleanConstructor;
    };
    hstack: {
        type: BooleanConstructor;
    };
    align: {
        type: StringConstructor[];
    };
    order: {
        type: (StringConstructor | NumberConstructor)[];
    };
    offset: {
        type: (StringConstructor | NumberConstructor | ArrayConstructor)[];
    };
    objectFit: {
        type: StringConstructor[];
    };
    z: {
        type: (StringConstructor | NumberConstructor)[];
    };
    theme: {
        type: StringConstructor[];
    };
    fontSize: {
        type: (StringConstructor | NumberConstructor)[];
    };
    fontWeight: {
        type: StringConstructor;
    };
    fontStyle: {
        type: StringConstructor;
    };
    lineHeight: {
        type: StringConstructor;
    };
    fontMonospace: {
        type: BooleanConstructor;
    };
    fontFamily: {
        type: StringConstructor;
    };
    textReset: {
        type: BooleanConstructor;
    };
    textDecoration: {
        type: StringConstructor;
    };
    textTruncate: {
        type: BooleanConstructor;
    };
    textOpacity: {
        type: (StringConstructor | NumberConstructor)[];
    };
    textTransform: {
        type: StringConstructor;
    };
    textBackground: {
        type: StringConstructor;
    };
    headings: {
        type: (StringConstructor | NumberConstructor)[];
    };
    lead: {
        type: BooleanConstructor;
    };
    mark: {
        type: BooleanConstructor;
    };
    small: {
        type: BooleanConstructor;
    };
    textColor: {
        type: StringConstructor;
    };
    padding: {
        type: (StringConstructor | NumberConstructor | ArrayConstructor)[];
    };
    margin: {
        type: (StringConstructor | NumberConstructor | ArrayConstructor)[];
    };
    display: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    gap: {
        type: (StringConstructor | NumberConstructor | ArrayConstructor)[];
    };
    visuallyHidden: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    verticalAlign: {
        type: StringConstructor;
    };
    invisible: {
        type: BooleanConstructor;
    };
    userSelect: {
        type: StringConstructor;
    };
    pointerEvents: {
        type: StringConstructor;
    };
    backgroundColor: {
        type: StringConstructor;
    };
    backgroundGradient: {
        type: BooleanConstructor;
    };
    backgroundImage: {
        type: StringConstructor;
    };
    backgroundOpacity: {
        type: (StringConstructor | NumberConstructor)[];
    };
    opacity: {
        type: (StringConstructor | NumberConstructor)[];
    };
    relativeWidth: {
        type: (StringConstructor | NumberConstructor)[];
    };
    relativeHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxWidth: {
        type: BooleanConstructor;
    };
    maxHeight: {
        type: BooleanConstructor;
    };
    viewportWidth: {
        type: BooleanConstructor;
    };
    viewportHeight: {
        type: BooleanConstructor;
    };
    minViewportWidth: {
        type: BooleanConstructor;
    };
    minViewportHeight: {
        type: BooleanConstructor;
    };
    placeholder: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    placeholderSize: {
        type: StringConstructor;
    };
    col: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor | ArrayConstructor)[];
    };
    position: {
        type: StringConstructor;
    };
    top: {
        type: (StringConstructor | NumberConstructor)[];
    };
    start: {
        type: (StringConstructor | NumberConstructor)[];
    };
    end: {
        type: (StringConstructor | NumberConstructor)[];
    };
    bottom: {
        type: (StringConstructor | NumberConstructor)[];
    };
    translate: {
        type: StringConstructor;
    };
    initialism: {
        type: BooleanConstructor[];
    };
    focusRing: {
        type: BooleanConstructor[];
    };
    border: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
    };
    borderColor: {
        type: StringConstructor;
    };
    borderWidth: {
        type: (StringConstructor | NumberConstructor)[];
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    roundedSize: {
        type: (StringConstructor | NumberConstructor)[];
    };
    linkOpacity: {
        type: (StringConstructor | NumberConstructor)[];
    };
    linkUnderline: {
        type: StringConstructor[];
    };
    linkOffset: {
        type: (StringConstructor | NumberConstructor)[];
    };
    tag: {
        type: StringConstructor;
    };
};
export interface IBlockProps extends IInlineProps {
    shadow?: string | boolean;
    textAlignment?: string;
    textWrap?: string;
    textBreak?: boolean;
    textBackground?: string;
    alignSelf?: string;
    alignItems?: string;
    alignContent?: string;
    flex?: boolean | string | unknown[];
    flexDirection?: string | unknown[];
    flexFill?: boolean | string;
    flexGrow?: string;
    flexOrder?: string | number;
    flexWrap?: string;
    float?: string;
    rounded?: boolean | string;
    roundedSize?: number | string;
    ratio?: string | number | boolean;
    fixed?: string;
    sticky?: string;
    clearfix?: boolean;
    overflow?: string;
    tableResponsive?: string;
    justifyContent?: string | boolean;
    vstack?: boolean;
    hstack?: boolean;
    align?: string | boolean;
    order?: number | boolean | string;
    offset?: number | boolean | string | unknown[];
    objectFit?: string;
    z?: string | number | boolean;
    theme?: string;
}
export declare function useBlock<P extends IBlockProps>(props: P): {
    class: import("vue").ComputedRef<{
        [x: string]: unknown;
        ratio: string | number | boolean | undefined;
        clearfix: boolean | undefined;
        vstack: boolean | undefined;
        hstack: boolean | undefined;
        "text-break": boolean | undefined;
        initialism: boolean | undefined;
        "focus-ring": boolean | undefined;
        "link-underline": string | undefined;
        col: boolean | "" | 0 | undefined;
        invisible: boolean | undefined;
        "bg-gradient": boolean | undefined;
        "mw-100": boolean | undefined;
        "mh-100": boolean | undefined;
        "vw-100": boolean | undefined;
        "vh-100": boolean | undefined;
        "min-vw-100": boolean | undefined;
        "min-vh-100": boolean | undefined;
        "font-monospace": boolean | undefined;
        "text-reset": boolean | undefined;
        "text-truncate": boolean | undefined;
        lead: boolean | undefined;
        mark: boolean | undefined;
        small: boolean | undefined;
    }>;
    style: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    attr: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
};
