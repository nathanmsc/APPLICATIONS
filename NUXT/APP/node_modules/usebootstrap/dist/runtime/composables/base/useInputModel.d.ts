import { type Ref } from "vue";
export declare const InputModelProps: {
    modelValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    trueValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    falseValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    value: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
    };
};
export interface IInputModelProps {
    modelValue?: string | boolean | number | object;
    trueValue?: string | boolean | number | object;
    falseValue?: string | boolean | number | object;
    value?: string | boolean | number | object;
}
export declare const InputModelEmits: string[];
export declare function useInputModel<P extends IInputModelProps>(props: P, emit: (event: string, ...args: any[]) => void, elementRef: Ref<HTMLElement | undefined>): {
    event: {
        onInput: (event: Event) => void;
    };
};
