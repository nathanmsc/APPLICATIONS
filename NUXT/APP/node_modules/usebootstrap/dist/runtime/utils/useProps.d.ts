import type { Ref, VNode, Slot, SetupContext } from "vue";
import type { /* isNumber, isString,*/ MaybeRef } from "@vueuse/core";
export interface IHPropsModel {
    class?: MaybeRef<Record<string, unknown>>;
    style?: MaybeRef<Record<string, unknown>>;
    attr?: MaybeRef<Record<string, unknown>>;
    state?: Record<string, MaybeRef<unknown>>;
    method?: Record<string, Function>;
    event?: Record<string, Function | undefined>;
    ref?: Ref<HTMLElement | undefined>;
    tag?: string;
    render?: () => VNode | VNode[] | undefined;
    provideSuffix?: string;
}
interface IRenderPropsModel {
    class?: Record<string, unknown>;
    style?: Record<string, unknown>;
    [key: string]: unknown;
}
export declare function hProps(...items: IHPropsModel[]): IRenderPropsModel;
declare type hSlotsProps = Slot | undefined | (() => VNode | VNode[] | undefined);
export declare function hSlots(...slots: hSlotsProps[]): (VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined)[];
type ClassNameGenerator = (a: any) => string;
export declare function addClassNames<T>(value: T, func: ClassNameGenerator): Record<string, unknown>;
export declare function addProp<T>(test: T, name: string, value: string | undefined): false | {
    [x: string]: string | undefined;
};
export declare function isPropUndefined(value: any): boolean;
export declare function isPropDefined(value: any): boolean;
export declare function isNumrable(value: string): boolean;
export declare function hasValue(value?: any): string | boolean;
export declare function isTrue(value?: any): boolean;
export declare function toNum(value?: any): number;
export declare function toArray(value?: any): any[];
export declare function exposeMethods(context: SetupContext<Record<string, any>>, ...items: IHPropsModel[]): void;
export declare function spacing(val: string, tag: string): string;
export {};
